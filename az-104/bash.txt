ls : ls lists the contents of your current directory or the directory specified in an argument to the command.

Files and directories whose names begin with a period are hidden by default. To include these items in a directory listing, use an -a flag:
ls -a

To get even more information about the files and directories in the current directory, use an -l flag:
ls -l

cat command
Suppose you want to see what's inside a file. You can use the cat command for that.

sudo command
Some Bash commands can only be run by the root user; a system administrator or superuser

cd, mkdir, and rmdir commands
cd stands for "change directory," and it does exactly what the name suggests: it changes the current directory to another directory. It enables you to move from one directory to another just like its counterpart in Windows. The following command changes to a subdirectory of the current directory named orders:
cd orders
You can move up a directory by specifying .. as the directory name:
cd ..
This command changes to your home directory; the one you land in when you first sign in:
cd ~
You can create directories by using the mkdir command. The following command creates a subdirectory named orders in the current working directory:
mkdir orders
If you want to create a subdirectory and another subdirectory under it with one command, use the --parents flag:
mkdir --parents orders/2019
The rmdir command deletes (removes) a directory, but only if it's empty. If it's not empty, you get a warning instead. Fortunately, you can use the rm command to delete directories that aren't empty in combination with the -r (recursive) flag. The command would then look like so, rm -r.

rm command
The rm command is short for "remove." As you'd expect, rm deletes files. So this command puts an end to 0001.jpg:
rm 0001.jpg
And this command deletes all the files in the current directory:
rm *
Be wary of rm. It's a dangerous command.
Running rm with a -i flag lets you think before you delete:
rm -i *
Make it a habit to include -i in every rm command, and you might avoid falling victim to one of Linux's biggest blunders. The dreaded rm -rf / command deletes every file on an entire drive. It works by recursively deleting all the subdirectories of root and their subdirectories. The -f (for "force") flag compounds the problem by suppressing prompts. Don't do this.
If you want to delete a subdirectory named orders that isn't empty, you can use the rm command this way:
rm -r orders
This deletes the orders subdirectory and everything in it, including other subdirectories.

cp command
The cp command copies not just files, but entire directories (and subdirectories) if you want. To make a copy of 0001.jpg named 0002.jpg, use this command:
cp 0001.jpg 0002.jpg
If 0002.jpg already exists, Bash silently replaces it. That's great if it's what you intended, but not so wonderful if you didn't realize you were about to overwrite the old version.
Fortunately, if you use the -i (for "interactive") flag, Bash warns you before deleting existing files. This is safer:
cp -i 0001.jpg 0002.jpg
You can use wildcards to copy several files at once. To copy all the files in the current directory to a subdirectory named photos, do this:
cp * photos
To copy all the files in a subdirectory named photos into a subdirectory named images, do this:
cp photos/* images
This assumes that the images directory already exists. If it doesn't, you can create it and copy the contents of the photos directory by using this command:
cp -r photos images
The -r stands for "recursive." An added benefit of the -r flag is that if photos contains subdirectories of its own, they too are copied to the images directory.

Linux provides the w (for "who") command. It displays information about the users currently on the computer system and those users' activities. w shows user names, their IP addresses, when they logged in, what processes they're currently running, and how much time those processes are consuming. It's a valuable tool for sysadmins.
